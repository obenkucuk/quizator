// Mocks generated by Mockito 5.4.4 from annotations
// in quizator/test/features/quiz/presentation/views/quiz_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fpdart/fpdart.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:quizator/core/failures/failure.dart' as _i7;
import 'package:quizator/features/quiz/data/models/quiz_model.dart' as _i8;
import 'package:quizator/features/quiz/domain/repositories/i_quiz_repository.dart'
    as _i2;
import 'package:quizator/features/quiz/domain/usecases/get_selected_quiz.dart'
    as _i4;
import 'package:quizator/services/log/my_logger.dart' as _i10;
import 'package:talker_flutter/talker_flutter.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIQuizRepository_0 extends _i1.SmartFake
    implements _i2.IQuizRepository {
  _FakeIQuizRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTalker_1 extends _i1.SmartFake implements _i3.Talker {
  _FakeTalker_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetSelectedQuiz].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSelectedQuiz extends _i1.Mock implements _i4.GetSelectedQuiz {
  @override
  _i2.IQuizRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeIQuizRepository_0(
          this,
          Invocation.getter(#repository),
        ),
        returnValueForMissingStub: _FakeIQuizRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.IQuizRepository);

  @override
  _i5.Future<_i6.Either<_i7.IFailure, _i8.QuizModel>> call(
          _i4.SelectedQuizParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i6.Either<_i7.IFailure, _i8.QuizModel>>.value(
            _i9.dummyValue<_i6.Either<_i7.IFailure, _i8.QuizModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i6.Either<_i7.IFailure, _i8.QuizModel>>.value(
                _i9.dummyValue<_i6.Either<_i7.IFailure, _i8.QuizModel>>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i6.Either<_i7.IFailure, _i8.QuizModel>>);
}

/// A class which mocks [MyTalkerLogger].
///
/// See the documentation for Mockito's code generation for more information.
class MockMyTalkerLogger extends _i1.Mock implements _i10.MyTalkerLogger {
  @override
  _i3.Talker get talker => (super.noSuchMethod(
        Invocation.getter(#talker),
        returnValue: _FakeTalker_1(
          this,
          Invocation.getter(#talker),
        ),
        returnValueForMissingStub: _FakeTalker_1(
          this,
          Invocation.getter(#talker),
        ),
      ) as _i3.Talker);

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(String? message) => super.noSuchMethod(
        Invocation.method(
          #error,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void handle(
    Object? exception, [
    StackTrace? stackTrace,
    dynamic msg,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #handle,
          [
            exception,
            stackTrace,
            msg,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void log(String? message) => super.noSuchMethod(
        Invocation.method(
          #log,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void verbose(String? message) => super.noSuchMethod(
        Invocation.method(
          #verbose,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(String? message) => super.noSuchMethod(
        Invocation.method(
          #warning,
          [message],
        ),
        returnValueForMissingStub: null,
      );
}
